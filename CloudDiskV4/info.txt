===== client.cpp =====
#include "clouddisk.srpc.h"
#include "workflow/WFFacilities.h"
#include <iostream>
#include <signal.h>
using std::cout;
using std::endl;

using namespace srpc;

static WFFacilities::WaitGroup wait_group(1);

void sig_handler(int signo)
{
	wait_group.done();
}

static void signup_done(::clouddisk::SignUpResponse *response, srpc::RPCContext *context)
{
	if (!context->success())
	{
		cout << "error code = :" << context->get_error() << "errmsg = " << context->get_errmsg() << endl;
		return;
	}
	else
	{
		cout << "[SignUp] status=" << response->status()
			 << ", msg=" << response->msg() << endl;
	}
}

static void signin_done(::clouddisk::SignUpResponse *response, srpc::RPCContext *context)
{
	if (!context->success())
	{
		cout << "error code = :" << context->get_error() << "errmsg = " << context->get_errmsg() << endl;
		return;
	}
	else
	{
		cout << "[SignIn] status=" << response->status()
			 << ", msg=" << response->msg() << endl;
	}
}

int main()
{
	signal(SIGINT, sig_handler);
	GOOGLE_PROTOBUF_VERIFY_VERSION;
	const char *ip = "127.0.0.1";
	unsigned short port = 1412;

	::clouddisk::UserService::SRPCClient client(ip, port);

	// example for RPC method call
	::clouddisk::SignUpRequest signup_req;
	signup_req.set_username("alice");
	signup_req.set_password("123456");
	// signup_req.set_message("Hello, srpc!");
	client.SignUp(&signup_req, signup_done);

	wait_group.wait();
	google::protobuf::ShutdownProtobufLibrary();
	return 0;
}


===== clouddisk.pb.cpp =====
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: clouddisk.proto

#include "clouddisk.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace clouddisk {
PROTOBUF_CONSTEXPR SignUpRequest::SignUpRequest(
    ::_pbi::ConstantInitialized)
  : username_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , password_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct SignUpRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SignUpRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SignUpRequestDefaultTypeInternal() {}
  union {
    SignUpRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SignUpRequestDefaultTypeInternal _SignUpRequest_default_instance_;
PROTOBUF_CONSTEXPR SignUpResponse::SignUpResponse(
    ::_pbi::ConstantInitialized)
  : status_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , msg_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , token_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct SignUpResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SignUpResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SignUpResponseDefaultTypeInternal() {}
  union {
    SignUpResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SignUpResponseDefaultTypeInternal _SignUpResponse_default_instance_;
}  // namespace clouddisk
static ::_pb::Metadata file_level_metadata_clouddisk_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_clouddisk_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_clouddisk_2eproto = nullptr;

const uint32_t TableStruct_clouddisk_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clouddisk::SignUpRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clouddisk::SignUpRequest, username_),
  PROTOBUF_FIELD_OFFSET(::clouddisk::SignUpRequest, password_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clouddisk::SignUpResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clouddisk::SignUpResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clouddisk::SignUpResponse, msg_),
  PROTOBUF_FIELD_OFFSET(::clouddisk::SignUpResponse, token_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::clouddisk::SignUpRequest)},
  { 8, -1, -1, sizeof(::clouddisk::SignUpResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::clouddisk::_SignUpRequest_default_instance_._instance,
  &::clouddisk::_SignUpResponse_default_instance_._instance,
};

const char descriptor_table_protodef_clouddisk_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017clouddisk.proto\022\tclouddisk\"3\n\rSignUpRe"
  "quest\022\020\n\010username\030\001 \001(\t\022\020\n\010password\030\002 \001("
  "\t\"<\n\016SignUpResponse\022\016\n\006status\030\001 \001(\t\022\013\n\003m"
  "sg\030\002 \001(\t\022\r\n\005token\030\003 \001(\t2\213\001\n\013UserService\022"
  "=\n\006SignUp\022\030.clouddisk.SignUpRequest\032\031.cl"
  "ouddisk.SignUpResponse\022=\n\006SignIn\022\030.cloud"
  "disk.SignUpRequest\032\031.clouddisk.SignUpRes"
  "ponseb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_clouddisk_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_clouddisk_2eproto = {
    false, false, 293, descriptor_table_protodef_clouddisk_2eproto,
    "clouddisk.proto",
    &descriptor_table_clouddisk_2eproto_once, nullptr, 0, 2,
    schemas, file_default_instances, TableStruct_clouddisk_2eproto::offsets,
    file_level_metadata_clouddisk_2eproto, file_level_enum_descriptors_clouddisk_2eproto,
    file_level_service_descriptors_clouddisk_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_clouddisk_2eproto_getter() {
  return &descriptor_table_clouddisk_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_clouddisk_2eproto(&descriptor_table_clouddisk_2eproto);
namespace clouddisk {

// ===================================================================

class SignUpRequest::_Internal {
 public:
};

SignUpRequest::SignUpRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:clouddisk.SignUpRequest)
}
SignUpRequest::SignUpRequest(const SignUpRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_username().empty()) {
    username_.Set(from._internal_username(), 
      GetArenaForAllocation());
  }
  password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_password().empty()) {
    password_.Set(from._internal_password(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:clouddisk.SignUpRequest)
}

inline void SignUpRequest::SharedCtor() {
username_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  username_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
password_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  password_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SignUpRequest::~SignUpRequest() {
  // @@protoc_insertion_point(destructor:clouddisk.SignUpRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SignUpRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  username_.Destroy();
  password_.Destroy();
}

void SignUpRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SignUpRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clouddisk.SignUpRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  username_.ClearToEmpty();
  password_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SignUpRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string username = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_username();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clouddisk.SignUpRequest.username"));
        } else
          goto handle_unusual;
        continue;
      // string password = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_password();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clouddisk.SignUpRequest.password"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SignUpRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clouddisk.SignUpRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string username = 1;
  if (!this->_internal_username().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clouddisk.SignUpRequest.username");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_username(), target);
  }

  // string password = 2;
  if (!this->_internal_password().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clouddisk.SignUpRequest.password");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_password(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clouddisk.SignUpRequest)
  return target;
}

size_t SignUpRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clouddisk.SignUpRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string username = 1;
  if (!this->_internal_username().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // string password = 2;
  if (!this->_internal_password().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SignUpRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SignUpRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SignUpRequest::GetClassData() const { return &_class_data_; }

void SignUpRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SignUpRequest *>(to)->MergeFrom(
      static_cast<const SignUpRequest &>(from));
}


void SignUpRequest::MergeFrom(const SignUpRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clouddisk.SignUpRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_username().empty()) {
    _internal_set_username(from._internal_username());
  }
  if (!from._internal_password().empty()) {
    _internal_set_password(from._internal_password());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SignUpRequest::CopyFrom(const SignUpRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clouddisk.SignUpRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignUpRequest::IsInitialized() const {
  return true;
}

void SignUpRequest::InternalSwap(SignUpRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &username_, lhs_arena,
      &other->username_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &password_, lhs_arena,
      &other->password_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SignUpRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_clouddisk_2eproto_getter, &descriptor_table_clouddisk_2eproto_once,
      file_level_metadata_clouddisk_2eproto[0]);
}

// ===================================================================

class SignUpResponse::_Internal {
 public:
};

SignUpResponse::SignUpResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:clouddisk.SignUpResponse)
}
SignUpResponse::SignUpResponse(const SignUpResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    status_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_status().empty()) {
    status_.Set(from._internal_status(), 
      GetArenaForAllocation());
  }
  msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msg().empty()) {
    msg_.Set(from._internal_msg(), 
      GetArenaForAllocation());
  }
  token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_token().empty()) {
    token_.Set(from._internal_token(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:clouddisk.SignUpResponse)
}

inline void SignUpResponse::SharedCtor() {
status_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  status_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
msg_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  msg_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
token_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  token_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SignUpResponse::~SignUpResponse() {
  // @@protoc_insertion_point(destructor:clouddisk.SignUpResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SignUpResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  status_.Destroy();
  msg_.Destroy();
  token_.Destroy();
}

void SignUpResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SignUpResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clouddisk.SignUpResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_.ClearToEmpty();
  msg_.ClearToEmpty();
  token_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SignUpResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_status();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clouddisk.SignUpResponse.status"));
        } else
          goto handle_unusual;
        continue;
      // string msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_msg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clouddisk.SignUpResponse.msg"));
        } else
          goto handle_unusual;
        continue;
      // string token = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clouddisk.SignUpResponse.token"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SignUpResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clouddisk.SignUpResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string status = 1;
  if (!this->_internal_status().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clouddisk.SignUpResponse.status");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_status(), target);
  }

  // string msg = 2;
  if (!this->_internal_msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clouddisk.SignUpResponse.msg");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_msg(), target);
  }

  // string token = 3;
  if (!this->_internal_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clouddisk.SignUpResponse.token");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clouddisk.SignUpResponse)
  return target;
}

size_t SignUpResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clouddisk.SignUpResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string status = 1;
  if (!this->_internal_status().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  // string msg = 2;
  if (!this->_internal_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // string token = 3;
  if (!this->_internal_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SignUpResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SignUpResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SignUpResponse::GetClassData() const { return &_class_data_; }

void SignUpResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SignUpResponse *>(to)->MergeFrom(
      static_cast<const SignUpResponse &>(from));
}


void SignUpResponse::MergeFrom(const SignUpResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clouddisk.SignUpResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_status().empty()) {
    _internal_set_status(from._internal_status());
  }
  if (!from._internal_msg().empty()) {
    _internal_set_msg(from._internal_msg());
  }
  if (!from._internal_token().empty()) {
    _internal_set_token(from._internal_token());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SignUpResponse::CopyFrom(const SignUpResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clouddisk.SignUpResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignUpResponse::IsInitialized() const {
  return true;
}

void SignUpResponse::InternalSwap(SignUpResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &status_, lhs_arena,
      &other->status_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &msg_, lhs_arena,
      &other->msg_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &token_, lhs_arena,
      &other->token_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SignUpResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_clouddisk_2eproto_getter, &descriptor_table_clouddisk_2eproto_once,
      file_level_metadata_clouddisk_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace clouddisk
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::clouddisk::SignUpRequest*
Arena::CreateMaybeMessage< ::clouddisk::SignUpRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clouddisk::SignUpRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clouddisk::SignUpResponse*
Arena::CreateMaybeMessage< ::clouddisk::SignUpResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clouddisk::SignUpResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>


===== clouddisk.pb.h =====
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: clouddisk.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_clouddisk_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_clouddisk_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_clouddisk_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_clouddisk_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_clouddisk_2eproto;
namespace clouddisk {
class SignUpRequest;
struct SignUpRequestDefaultTypeInternal;
extern SignUpRequestDefaultTypeInternal _SignUpRequest_default_instance_;
class SignUpResponse;
struct SignUpResponseDefaultTypeInternal;
extern SignUpResponseDefaultTypeInternal _SignUpResponse_default_instance_;
}  // namespace clouddisk
PROTOBUF_NAMESPACE_OPEN
template<> ::clouddisk::SignUpRequest* Arena::CreateMaybeMessage<::clouddisk::SignUpRequest>(Arena*);
template<> ::clouddisk::SignUpResponse* Arena::CreateMaybeMessage<::clouddisk::SignUpResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace clouddisk {

// ===================================================================

class SignUpRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clouddisk.SignUpRequest) */ {
 public:
  inline SignUpRequest() : SignUpRequest(nullptr) {}
  ~SignUpRequest() override;
  explicit PROTOBUF_CONSTEXPR SignUpRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SignUpRequest(const SignUpRequest& from);
  SignUpRequest(SignUpRequest&& from) noexcept
    : SignUpRequest() {
    *this = ::std::move(from);
  }

  inline SignUpRequest& operator=(const SignUpRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SignUpRequest& operator=(SignUpRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SignUpRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SignUpRequest* internal_default_instance() {
    return reinterpret_cast<const SignUpRequest*>(
               &_SignUpRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SignUpRequest& a, SignUpRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SignUpRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SignUpRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SignUpRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SignUpRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SignUpRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SignUpRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SignUpRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clouddisk.SignUpRequest";
  }
  protected:
  explicit SignUpRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 1,
    kPasswordFieldNumber = 2,
  };
  // string username = 1;
  void clear_username();
  const std::string& username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // string password = 2;
  void clear_password();
  const std::string& password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // @@protoc_insertion_point(class_scope:clouddisk.SignUpRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_clouddisk_2eproto;
};
// -------------------------------------------------------------------

class SignUpResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clouddisk.SignUpResponse) */ {
 public:
  inline SignUpResponse() : SignUpResponse(nullptr) {}
  ~SignUpResponse() override;
  explicit PROTOBUF_CONSTEXPR SignUpResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SignUpResponse(const SignUpResponse& from);
  SignUpResponse(SignUpResponse&& from) noexcept
    : SignUpResponse() {
    *this = ::std::move(from);
  }

  inline SignUpResponse& operator=(const SignUpResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SignUpResponse& operator=(SignUpResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SignUpResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SignUpResponse* internal_default_instance() {
    return reinterpret_cast<const SignUpResponse*>(
               &_SignUpResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SignUpResponse& a, SignUpResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SignUpResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SignUpResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SignUpResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SignUpResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SignUpResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SignUpResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SignUpResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clouddisk.SignUpResponse";
  }
  protected:
  explicit SignUpResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kMsgFieldNumber = 2,
    kTokenFieldNumber = 3,
  };
  // string status = 1;
  void clear_status();
  const std::string& status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status();
  PROTOBUF_NODISCARD std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_NODISCARD std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // string token = 3;
  void clear_token();
  const std::string& token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token();
  PROTOBUF_NODISCARD std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // @@protoc_insertion_point(class_scope:clouddisk.SignUpResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_clouddisk_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SignUpRequest

// string username = 1;
inline void SignUpRequest::clear_username() {
  username_.ClearToEmpty();
}
inline const std::string& SignUpRequest::username() const {
  // @@protoc_insertion_point(field_get:clouddisk.SignUpRequest.username)
  return _internal_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SignUpRequest::set_username(ArgT0&& arg0, ArgT... args) {
 
 username_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clouddisk.SignUpRequest.username)
}
inline std::string* SignUpRequest::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:clouddisk.SignUpRequest.username)
  return _s;
}
inline const std::string& SignUpRequest::_internal_username() const {
  return username_.Get();
}
inline void SignUpRequest::_internal_set_username(const std::string& value) {
  
  username_.Set(value, GetArenaForAllocation());
}
inline std::string* SignUpRequest::_internal_mutable_username() {
  
  return username_.Mutable(GetArenaForAllocation());
}
inline std::string* SignUpRequest::release_username() {
  // @@protoc_insertion_point(field_release:clouddisk.SignUpRequest.username)
  return username_.Release();
}
inline void SignUpRequest::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(username, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (username_.IsDefault()) {
    username_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clouddisk.SignUpRequest.username)
}

// string password = 2;
inline void SignUpRequest::clear_password() {
  password_.ClearToEmpty();
}
inline const std::string& SignUpRequest::password() const {
  // @@protoc_insertion_point(field_get:clouddisk.SignUpRequest.password)
  return _internal_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SignUpRequest::set_password(ArgT0&& arg0, ArgT... args) {
 
 password_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clouddisk.SignUpRequest.password)
}
inline std::string* SignUpRequest::mutable_password() {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:clouddisk.SignUpRequest.password)
  return _s;
}
inline const std::string& SignUpRequest::_internal_password() const {
  return password_.Get();
}
inline void SignUpRequest::_internal_set_password(const std::string& value) {
  
  password_.Set(value, GetArenaForAllocation());
}
inline std::string* SignUpRequest::_internal_mutable_password() {
  
  return password_.Mutable(GetArenaForAllocation());
}
inline std::string* SignUpRequest::release_password() {
  // @@protoc_insertion_point(field_release:clouddisk.SignUpRequest.password)
  return password_.Release();
}
inline void SignUpRequest::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocated(password, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (password_.IsDefault()) {
    password_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clouddisk.SignUpRequest.password)
}

// -------------------------------------------------------------------

// SignUpResponse

// string status = 1;
inline void SignUpResponse::clear_status() {
  status_.ClearToEmpty();
}
inline const std::string& SignUpResponse::status() const {
  // @@protoc_insertion_point(field_get:clouddisk.SignUpResponse.status)
  return _internal_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SignUpResponse::set_status(ArgT0&& arg0, ArgT... args) {
 
 status_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clouddisk.SignUpResponse.status)
}
inline std::string* SignUpResponse::mutable_status() {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:clouddisk.SignUpResponse.status)
  return _s;
}
inline const std::string& SignUpResponse::_internal_status() const {
  return status_.Get();
}
inline void SignUpResponse::_internal_set_status(const std::string& value) {
  
  status_.Set(value, GetArenaForAllocation());
}
inline std::string* SignUpResponse::_internal_mutable_status() {
  
  return status_.Mutable(GetArenaForAllocation());
}
inline std::string* SignUpResponse::release_status() {
  // @@protoc_insertion_point(field_release:clouddisk.SignUpResponse.status)
  return status_.Release();
}
inline void SignUpResponse::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocated(status, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (status_.IsDefault()) {
    status_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clouddisk.SignUpResponse.status)
}

// string msg = 2;
inline void SignUpResponse::clear_msg() {
  msg_.ClearToEmpty();
}
inline const std::string& SignUpResponse::msg() const {
  // @@protoc_insertion_point(field_get:clouddisk.SignUpResponse.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SignUpResponse::set_msg(ArgT0&& arg0, ArgT... args) {
 
 msg_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clouddisk.SignUpResponse.msg)
}
inline std::string* SignUpResponse::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:clouddisk.SignUpResponse.msg)
  return _s;
}
inline const std::string& SignUpResponse::_internal_msg() const {
  return msg_.Get();
}
inline void SignUpResponse::_internal_set_msg(const std::string& value) {
  
  msg_.Set(value, GetArenaForAllocation());
}
inline std::string* SignUpResponse::_internal_mutable_msg() {
  
  return msg_.Mutable(GetArenaForAllocation());
}
inline std::string* SignUpResponse::release_msg() {
  // @@protoc_insertion_point(field_release:clouddisk.SignUpResponse.msg)
  return msg_.Release();
}
inline void SignUpResponse::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(msg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (msg_.IsDefault()) {
    msg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clouddisk.SignUpResponse.msg)
}

// string token = 3;
inline void SignUpResponse::clear_token() {
  token_.ClearToEmpty();
}
inline const std::string& SignUpResponse::token() const {
  // @@protoc_insertion_point(field_get:clouddisk.SignUpResponse.token)
  return _internal_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SignUpResponse::set_token(ArgT0&& arg0, ArgT... args) {
 
 token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clouddisk.SignUpResponse.token)
}
inline std::string* SignUpResponse::mutable_token() {
  std::string* _s = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:clouddisk.SignUpResponse.token)
  return _s;
}
inline const std::string& SignUpResponse::_internal_token() const {
  return token_.Get();
}
inline void SignUpResponse::_internal_set_token(const std::string& value) {
  
  token_.Set(value, GetArenaForAllocation());
}
inline std::string* SignUpResponse::_internal_mutable_token() {
  
  return token_.Mutable(GetArenaForAllocation());
}
inline std::string* SignUpResponse::release_token() {
  // @@protoc_insertion_point(field_release:clouddisk.SignUpResponse.token)
  return token_.Release();
}
inline void SignUpResponse::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (token_.IsDefault()) {
    token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clouddisk.SignUpResponse.token)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace clouddisk

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_clouddisk_2eproto


===== clouddisk.proto =====
syntax = "proto3";

package clouddisk;

message SignUpRequest {
    string username = 1;
    string password = 2;
}

message SignUpResponse {
    string status = 1;
    string msg = 2;
    string token = 3;
}

service UserService {
    rpc SignUp(SignUpRequest) returns (SignUpResponse);
    rpc SignIn(SignUpRequest) returns (SignUpResponse);
}



===== clouddisk.srpc.h =====
#pragma once
#include <stdio.h>
#include <string>
#include "srpc/rpc_define.h"
#include "clouddisk.pb.h"

namespace clouddisk
{

namespace UserService
{

/*
 * Server codes
 * Generated by SRPC
 */

class Service : public srpc::RPCService
{
public:
	// please implement these methods in server.cc

	virtual void SignUp(SignUpRequest *request, SignUpResponse *response,
					srpc::RPCContext *ctx) = 0;

	virtual void SignIn(SignUpRequest *request, SignUpResponse *response,
					srpc::RPCContext *ctx) = 0;

public:
	Service();
};

/*
 * Client codes
 * Generated by SRPC
 */

using SignUpDone = std::function<void (SignUpResponse *, srpc::RPCContext *)>;
using SignInDone = std::function<void (SignUpResponse *, srpc::RPCContext *)>;

class SRPCClient : public srpc::SRPCClient
{
public:
	void SignUp(const SignUpRequest *req, SignUpDone done);
	void SignUp(const SignUpRequest *req, SignUpResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<SignUpResponse, srpc::RPCSyncContext>> async_SignUp(const SignUpRequest *req);

	void SignIn(const SignUpRequest *req, SignInDone done);
	void SignIn(const SignUpRequest *req, SignUpResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<SignUpResponse, srpc::RPCSyncContext>> async_SignIn(const SignUpRequest *req);

public:
	SRPCClient(const char *host, unsigned short port);
	SRPCClient(const struct srpc::RPCClientParams *params);

public:
	srpc::SRPCClientTask *create_SignUp_task(SignUpDone done);
	srpc::SRPCClientTask *create_SignIn_task(SignInDone done);
};

class SRPCHttpClient : public srpc::SRPCHttpClient
{
public:
	void SignUp(const SignUpRequest *req, SignUpDone done);
	void SignUp(const SignUpRequest *req, SignUpResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<SignUpResponse, srpc::RPCSyncContext>> async_SignUp(const SignUpRequest *req);

	void SignIn(const SignUpRequest *req, SignInDone done);
	void SignIn(const SignUpRequest *req, SignUpResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<SignUpResponse, srpc::RPCSyncContext>> async_SignIn(const SignUpRequest *req);

public:
	SRPCHttpClient(const char *host, unsigned short port);
	SRPCHttpClient(const struct srpc::RPCClientParams *params);

public:
	srpc::SRPCHttpClientTask *create_SignUp_task(SignUpDone done);
	srpc::SRPCHttpClientTask *create_SignIn_task(SignInDone done);
};

class BRPCClient : public srpc::BRPCClient
{
public:
	void SignUp(const SignUpRequest *req, SignUpDone done);
	void SignUp(const SignUpRequest *req, SignUpResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<SignUpResponse, srpc::RPCSyncContext>> async_SignUp(const SignUpRequest *req);

	void SignIn(const SignUpRequest *req, SignInDone done);
	void SignIn(const SignUpRequest *req, SignUpResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<SignUpResponse, srpc::RPCSyncContext>> async_SignIn(const SignUpRequest *req);

public:
	BRPCClient(const char *host, unsigned short port);
	BRPCClient(const struct srpc::RPCClientParams *params);

public:
	srpc::BRPCClientTask *create_SignUp_task(SignUpDone done);
	srpc::BRPCClientTask *create_SignIn_task(SignInDone done);
};

class TRPCClient : public srpc::TRPCClient
{
public:
	void SignUp(const SignUpRequest *req, SignUpDone done);
	void SignUp(const SignUpRequest *req, SignUpResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<SignUpResponse, srpc::RPCSyncContext>> async_SignUp(const SignUpRequest *req);

	void SignIn(const SignUpRequest *req, SignInDone done);
	void SignIn(const SignUpRequest *req, SignUpResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<SignUpResponse, srpc::RPCSyncContext>> async_SignIn(const SignUpRequest *req);

public:
	TRPCClient(const char *host, unsigned short port);
	TRPCClient(const struct srpc::RPCClientParams *params);

public:
	srpc::TRPCClientTask *create_SignUp_task(SignUpDone done);
	srpc::TRPCClientTask *create_SignIn_task(SignInDone done);
};

class TRPCHttpClient : public srpc::TRPCHttpClient
{
public:
	void SignUp(const SignUpRequest *req, SignUpDone done);
	void SignUp(const SignUpRequest *req, SignUpResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<SignUpResponse, srpc::RPCSyncContext>> async_SignUp(const SignUpRequest *req);

	void SignIn(const SignUpRequest *req, SignInDone done);
	void SignIn(const SignUpRequest *req, SignUpResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<SignUpResponse, srpc::RPCSyncContext>> async_SignIn(const SignUpRequest *req);

public:
	TRPCHttpClient(const char *host, unsigned short port);
	TRPCHttpClient(const struct srpc::RPCClientParams *params);

public:
	srpc::TRPCHttpClientTask *create_SignUp_task(SignUpDone done);
	srpc::TRPCHttpClientTask *create_SignIn_task(SignInDone done);
};

///// implements detials /////

inline Service::Service(): srpc::RPCService("clouddisk.UserService")
{
	this->srpc::RPCService::add_method("SignUp",
		[this](srpc::RPCWorker& worker) ->int {
			return ServiceRPCCallImpl(this, worker, &Service::SignUp);
		});

	this->srpc::RPCService::add_method("SignIn",
		[this](srpc::RPCWorker& worker) ->int {
			return ServiceRPCCallImpl(this, worker, &Service::SignIn);
		});
}

inline SRPCClient::SRPCClient(const char *host, unsigned short port):
	srpc::SRPCClient("clouddisk.UserService")
{
	struct srpc::RPCClientParams params = srpc::RPC_CLIENT_PARAMS_DEFAULT;
	
	params.host = host;
	params.port = port;
	this->srpc::SRPCClient::init(&params);
}

inline SRPCClient::SRPCClient(const struct srpc::RPCClientParams *params):
	srpc::SRPCClient("clouddisk.UserService")
{
	const struct srpc::RPCClientParams *temp = params;
	struct srpc::RPCClientParams temp_params;
	
	this->srpc::SRPCClient::init(temp);
}

inline void SRPCClient::SignUp(const SignUpRequest *req, SignUpDone done)
{
	auto *task = this->create_rpc_client_task("SignUp", std::move(done));

	task->serialize_input(req);
	task->start();
}

inline void SRPCClient::SignUp(const SignUpRequest *req, SignUpResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_SignUp(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<SignUpResponse, srpc::RPCSyncContext>> SRPCClient::async_SignUp(const SignUpRequest *req)
{
	using RESULT = std::pair<SignUpResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<SignUpResponse>("SignUp", srpc::RPCAsyncFutureCallback<SignUpResponse>);

	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void SRPCClient::SignIn(const SignUpRequest *req, SignInDone done)
{
	auto *task = this->create_rpc_client_task("SignIn", std::move(done));

	task->serialize_input(req);
	task->start();
}

inline void SRPCClient::SignIn(const SignUpRequest *req, SignUpResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_SignIn(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<SignUpResponse, srpc::RPCSyncContext>> SRPCClient::async_SignIn(const SignUpRequest *req)
{
	using RESULT = std::pair<SignUpResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<SignUpResponse>("SignIn", srpc::RPCAsyncFutureCallback<SignUpResponse>);

	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline srpc::SRPCClientTask *SRPCClient::create_SignUp_task(SignUpDone done)
{
	return this->create_rpc_client_task("SignUp", std::move(done));
}

inline srpc::SRPCClientTask *SRPCClient::create_SignIn_task(SignInDone done)
{
	return this->create_rpc_client_task("SignIn", std::move(done));
}

inline SRPCHttpClient::SRPCHttpClient(const char *host, unsigned short port):
	srpc::SRPCHttpClient("clouddisk/UserService")
{
	struct srpc::RPCClientParams params = srpc::RPC_CLIENT_PARAMS_DEFAULT;
	
	params.host = host;
	params.port = port;
	this->srpc::SRPCHttpClient::init(&params);
}

inline SRPCHttpClient::SRPCHttpClient(const struct srpc::RPCClientParams *params):
	srpc::SRPCHttpClient("clouddisk/UserService")
{
	const struct srpc::RPCClientParams *temp = params;
	struct srpc::RPCClientParams temp_params;
	
	this->srpc::SRPCHttpClient::init(temp);
}

inline void SRPCHttpClient::SignUp(const SignUpRequest *req, SignUpDone done)
{
	auto *task = this->create_rpc_client_task("SignUp", std::move(done));

	task->serialize_input(req);
	task->start();
}

inline void SRPCHttpClient::SignUp(const SignUpRequest *req, SignUpResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_SignUp(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<SignUpResponse, srpc::RPCSyncContext>> SRPCHttpClient::async_SignUp(const SignUpRequest *req)
{
	using RESULT = std::pair<SignUpResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<SignUpResponse>("SignUp", srpc::RPCAsyncFutureCallback<SignUpResponse>);

	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void SRPCHttpClient::SignIn(const SignUpRequest *req, SignInDone done)
{
	auto *task = this->create_rpc_client_task("SignIn", std::move(done));

	task->serialize_input(req);
	task->start();
}

inline void SRPCHttpClient::SignIn(const SignUpRequest *req, SignUpResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_SignIn(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<SignUpResponse, srpc::RPCSyncContext>> SRPCHttpClient::async_SignIn(const SignUpRequest *req)
{
	using RESULT = std::pair<SignUpResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<SignUpResponse>("SignIn", srpc::RPCAsyncFutureCallback<SignUpResponse>);

	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline srpc::SRPCHttpClientTask *SRPCHttpClient::create_SignUp_task(SignUpDone done)
{
	return this->create_rpc_client_task("SignUp", std::move(done));
}

inline srpc::SRPCHttpClientTask *SRPCHttpClient::create_SignIn_task(SignInDone done)
{
	return this->create_rpc_client_task("SignIn", std::move(done));
}

inline BRPCClient::BRPCClient(const char *host, unsigned short port):
	srpc::BRPCClient("clouddisk.UserService")
{
	struct srpc::RPCClientParams params = srpc::RPC_CLIENT_PARAMS_DEFAULT;
	
	params.host = host;
	params.port = port;
	this->srpc::BRPCClient::init(&params);
}

inline BRPCClient::BRPCClient(const struct srpc::RPCClientParams *params):
	srpc::BRPCClient("clouddisk.UserService")
{
	const struct srpc::RPCClientParams *temp = params;
	struct srpc::RPCClientParams temp_params;
	
	this->srpc::BRPCClient::init(temp);
}

inline void BRPCClient::SignUp(const SignUpRequest *req, SignUpDone done)
{
	auto *task = this->create_rpc_client_task("SignUp", std::move(done));

	task->serialize_input(req);
	task->start();
}

inline void BRPCClient::SignUp(const SignUpRequest *req, SignUpResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_SignUp(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<SignUpResponse, srpc::RPCSyncContext>> BRPCClient::async_SignUp(const SignUpRequest *req)
{
	using RESULT = std::pair<SignUpResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<SignUpResponse>("SignUp", srpc::RPCAsyncFutureCallback<SignUpResponse>);

	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void BRPCClient::SignIn(const SignUpRequest *req, SignInDone done)
{
	auto *task = this->create_rpc_client_task("SignIn", std::move(done));

	task->serialize_input(req);
	task->start();
}

inline void BRPCClient::SignIn(const SignUpRequest *req, SignUpResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_SignIn(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<SignUpResponse, srpc::RPCSyncContext>> BRPCClient::async_SignIn(const SignUpRequest *req)
{
	using RESULT = std::pair<SignUpResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<SignUpResponse>("SignIn", srpc::RPCAsyncFutureCallback<SignUpResponse>);

	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline srpc::BRPCClientTask *BRPCClient::create_SignUp_task(SignUpDone done)
{
	return this->create_rpc_client_task("SignUp", std::move(done));
}

inline srpc::BRPCClientTask *BRPCClient::create_SignIn_task(SignInDone done)
{
	return this->create_rpc_client_task("SignIn", std::move(done));
}

inline TRPCClient::TRPCClient(const char *host, unsigned short port):
	srpc::TRPCClient("clouddisk.UserService")
{
	struct srpc::RPCClientParams params = srpc::RPC_CLIENT_PARAMS_DEFAULT;
	
	params.host = host;
	params.port = port;
	this->srpc::TRPCClient::init(&params);
}

inline TRPCClient::TRPCClient(const struct srpc::RPCClientParams *params):
	srpc::TRPCClient("clouddisk.UserService")
{
	const struct srpc::RPCClientParams *temp = params;
	struct srpc::RPCClientParams temp_params;
	
	this->srpc::TRPCClient::init(temp);
}

inline void TRPCClient::SignUp(const SignUpRequest *req, SignUpDone done)
{
	auto *task = this->create_rpc_client_task("/clouddisk.UserService/SignUp", std::move(done));

	if (this->params.callee_timeout >= 0)
		task->get_req()->set_callee_timeout(this->params.callee_timeout);
	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);
	task->serialize_input(req);
	task->start();
}

inline void TRPCClient::SignUp(const SignUpRequest *req, SignUpResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_SignUp(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<SignUpResponse, srpc::RPCSyncContext>> TRPCClient::async_SignUp(const SignUpRequest *req)
{
	using RESULT = std::pair<SignUpResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<SignUpResponse>("/clouddisk.UserService/SignUp", srpc::RPCAsyncFutureCallback<SignUpResponse>);

	if (this->params.callee_timeout >= 0)
		task->get_req()->set_callee_timeout(this->params.callee_timeout);
	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);
	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void TRPCClient::SignIn(const SignUpRequest *req, SignInDone done)
{
	auto *task = this->create_rpc_client_task("/clouddisk.UserService/SignIn", std::move(done));

	if (this->params.callee_timeout >= 0)
		task->get_req()->set_callee_timeout(this->params.callee_timeout);
	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);
	task->serialize_input(req);
	task->start();
}

inline void TRPCClient::SignIn(const SignUpRequest *req, SignUpResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_SignIn(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<SignUpResponse, srpc::RPCSyncContext>> TRPCClient::async_SignIn(const SignUpRequest *req)
{
	using RESULT = std::pair<SignUpResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<SignUpResponse>("/clouddisk.UserService/SignIn", srpc::RPCAsyncFutureCallback<SignUpResponse>);

	if (this->params.callee_timeout >= 0)
		task->get_req()->set_callee_timeout(this->params.callee_timeout);
	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);
	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline srpc::TRPCClientTask *TRPCClient::create_SignUp_task(SignUpDone done)
{
	auto *task = this->create_rpc_client_task("/clouddisk.UserService/SignUp", std::move(done));

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);

	return task;
}

inline srpc::TRPCClientTask *TRPCClient::create_SignIn_task(SignInDone done)
{
	auto *task = this->create_rpc_client_task("/clouddisk.UserService/SignIn", std::move(done));

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);

	return task;
}

inline TRPCHttpClient::TRPCHttpClient(const char *host, unsigned short port):
	srpc::TRPCHttpClient("clouddisk.UserService")
{
	struct srpc::RPCClientParams params = srpc::RPC_CLIENT_PARAMS_DEFAULT;
	
	params.host = host;
	params.port = port;
	this->srpc::TRPCHttpClient::init(&params);
}

inline TRPCHttpClient::TRPCHttpClient(const struct srpc::RPCClientParams *params):
	srpc::TRPCHttpClient("clouddisk.UserService")
{
	const struct srpc::RPCClientParams *temp = params;
	struct srpc::RPCClientParams temp_params;
	
	this->srpc::TRPCHttpClient::init(temp);
}

inline void TRPCHttpClient::SignUp(const SignUpRequest *req, SignUpDone done)
{
	auto *task = this->create_rpc_client_task("SignUp", std::move(done));

	if (this->params.callee_timeout >= 0)
		task->get_req()->set_callee_timeout(this->params.callee_timeout);
	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);
	task->serialize_input(req);
	task->start();
}

inline void TRPCHttpClient::SignUp(const SignUpRequest *req, SignUpResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_SignUp(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<SignUpResponse, srpc::RPCSyncContext>> TRPCHttpClient::async_SignUp(const SignUpRequest *req)
{
	using RESULT = std::pair<SignUpResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<SignUpResponse>("SignUp", srpc::RPCAsyncFutureCallback<SignUpResponse>);

	if (this->params.callee_timeout >= 0)
		task->get_req()->set_callee_timeout(this->params.callee_timeout);
	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);
	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void TRPCHttpClient::SignIn(const SignUpRequest *req, SignInDone done)
{
	auto *task = this->create_rpc_client_task("SignIn", std::move(done));

	if (this->params.callee_timeout >= 0)
		task->get_req()->set_callee_timeout(this->params.callee_timeout);
	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);
	task->serialize_input(req);
	task->start();
}

inline void TRPCHttpClient::SignIn(const SignUpRequest *req, SignUpResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_SignIn(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<SignUpResponse, srpc::RPCSyncContext>> TRPCHttpClient::async_SignIn(const SignUpRequest *req)
{
	using RESULT = std::pair<SignUpResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<SignUpResponse>("SignIn", srpc::RPCAsyncFutureCallback<SignUpResponse>);

	if (this->params.callee_timeout >= 0)
		task->get_req()->set_callee_timeout(this->params.callee_timeout);
	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);
	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline srpc::TRPCHttpClientTask *TRPCHttpClient::create_SignUp_task(SignUpDone done)
{
	auto *task = this->create_rpc_client_task("SignUp", std::move(done));

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);

	return task;
}

inline srpc::TRPCHttpClientTask *TRPCHttpClient::create_SignIn_task(SignInDone done)
{
	auto *task = this->create_rpc_client_task("SignIn", std::move(done));

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);

	return task;
}

} // end namespace UserService

} // end namespace clouddisk



===== CloudiskServer.cpp =====
#include "CloudiskServer.h"
#include "MqClientWrapper.hpp"
#include "CryptoUtil.hpp"
#include "clouddisk.pb.h"
#include "clouddisk.srpc.h"
#include <iostream>
#include <fstream>
#include <filesystem>
#include <workflow/MySQLResult.h>
#include <nlohmann/json.hpp>
#include <wfrest/HttpMsg.h>
#include <map>
#include <vector>
#include <wfrest/HttpFile.h>
#include <wfrest/PathUtil.h>

using std::cout;
using std::endl;
using std::map;
using std::vector;
using std::string;
using std::ofstream;
using namespace wfrest;
using namespace protocol;
using json = nlohmann::json;
namespace fs = std::filesystem;

static WFFacilities::WaitGroup g_wait_group(1);
static const string mysql_url = "mysql://root:ZYJ.01234@127.0.0.1/http";

void CloudiskServer::register_modules()
{
    // 设置静态资源的路由
    register_static_resources_module();
    register_signup_module();
    register_signin_module();
    register_userinfo_module();
    register_filelist_module();
    register_fileupload_module();
    register_filedownload_module();
    register_filedelete_module();
}

string urlDecode(const string &src) {
    std::string ret;
    char ch;
    int i, ii;
    for (i = 0; i < (int)src.length(); i++) {
        if (int(src[i]) == 37) {  // %
            sscanf(src.substr(i + 1, 2).c_str(), "%x", &ii);
            ch = static_cast<char>(ii);
            ret += ch;
            i = i + 2;
        } else if (src[i] == '+') {
            ret += ' ';  // '+' 转空格
        } else {
            ret += src[i];
        }
    }
    return ret;
}

map<string, string> parse_uri(const string &uri) {
    map<string, string> params;
    size_t pos = uri.find("?");
    if (pos == string::npos) return params;

    string query = uri.substr(pos + 1);
    size_t start = 0;
    while (start < query.size()) {
        size_t eq = query.find("=", start);
        if (eq == string::npos) break;
        string key = query.substr(start, eq - start);

        size_t amp = query.find("&", eq + 1);
        string value;
        if (amp == string::npos) {
            value = query.substr(eq + 1);
            params[key] = urlDecode(value);   // ✅ decode
            break;
        } else {
            value = query.substr(eq + 1, amp - eq - 1);
            params[key] = urlDecode(value);   // ✅ decode
            start = amp + 1;
        }
    }
    return params;
}


void CloudiskServer::register_static_resources_module()
{
    m_server.GET("/user/signup", [](const HttpReq *, HttpResp *resp)
                 { resp->File("static/view/signup.html"); });

    m_server.GET("/static/view/signin.html", [](const HttpReq *, HttpResp *resp)
                 { resp->File("static/view/signin.html"); });

    m_server.GET("/static/view/home.html", [](const HttpReq *, HttpResp *resp)
                 { resp->File("static/view/home.html"); });

    m_server.GET("/static/js/auth.js", [](const HttpReq *, HttpResp *resp)
                 { resp->File("static/js/auth.js"); });

    m_server.GET("/static/img/avatar.jpeg", [](const HttpReq *, HttpResp *resp)
                 { resp->File("static/img/avatar.jpeg"); });

    m_server.GET("/file/upload", [](const HttpReq *, HttpResp *resp)
                 { resp->File("static/view/index.html"); });

    m_server.Static("/file/upload_files", "static/view/upload_files");
}

// 注册模块
void CloudiskServer::register_signup_module() {
    // GET: 返回登录页面
    m_server.GET("/user/signin", [](const HttpReq * , HttpResp * resp) {
        resp -> File("static/view/signin.html");
    });

    // POST: 处理登录请求
    m_server.POST("/user/signup", [](const HttpReq * req, HttpResp * resp, SeriesWork * series) {
        // 1. 校验请求参数，解析请求参数
        if (req -> content_type() != APPLICATION_URLENCODED) {
            resp -> set_status(HttpStatusBadRequest);
            resp -> String("<html>400 Bad Request</html>");
            return;
        }

        auto & params = req -> form_kv();
        string username = urlDecode(params["username"]);
        string password = params["password"];

        if (username.empty() || password.empty()) {
            resp -> set_status(HttpStatusBadRequest);
            json j;
            j["status"] = "Missing username or password";
            resp->add_header_pair("Content-Type", "application/json; charset=utf-8");
            resp->String(j.dump(4)); 
            return;
        }

        // 构造RPC请求
        ::clouddisk::SignUpRequest rpc_req;
        rpc_req.set_username(username);
        rpc_req.set_password(password);

        // 调用用户服务（假设跑在 127.0.0.1:1412）
        ::clouddisk::UserService::SRPCClient client("127.0.0.1", 1412);
        ::clouddisk::SignUpResponse rpc_resp;
        srpc::RPCSyncContext sync_ctx;

        client.SignUp(&rpc_req, &rpc_resp, &sync_ctx);
        json j;
        j["status"] = rpc_resp.status();
        j["msg"] = rpc_resp.msg();
        resp->add_header_pair("Content-Type", "application/json; charset=utf-8");
        resp->String(j.dump(4)); 
    });
}

// 登录模块
void CloudiskServer::register_signin_module()
{
    // seriesHandler
    m_server.POST("/user/signin", [](const HttpReq *req, HttpResp *resp, SeriesWork *series)
                  {
        // 1. 校验请求参数，解析请求参数
        if (req -> content_type() != APPLICATION_URLENCODED) {
            resp -> set_status(HttpStatusBadRequest);
            resp -> String("<html>400 Bad Request</html>");
        }

        auto & params = req -> form_kv();
        string username = urlDecode(params["username"]);
        string password = params["password"];

        // 构造RPC请求
        ::clouddisk::SignUpRequest rpc_req;
        rpc_req.set_username(username);
        rpc_req.set_password(password);

        // 调用用户服务
        ::clouddisk::UserService::SRPCClient client("127.0.0.1",1412);
        ::clouddisk::SignUpResponse rpc_resp;
        srpc::RPCSyncContext sync_ctx;

        client.SignIn(&rpc_req,&rpc_resp,&sync_ctx);


        json j;
        j["status"] = rpc_resp.status();
        j["msg"] = rpc_resp.msg();
        j["data"]["username"] = username;
        j["data"]["token"] = rpc_resp.token();   // 直接从 RPC 返回获取 token
        j["data"]["location"] = "/static/view/home.html";

        resp->set_status(HttpStatusOK);
        resp->add_header_pair("Content-Type", "application/json; charset=utf-8");
        resp->String(j.dump(4)); });
}

// 获取用户信息
void CloudiskServer::register_userinfo_module(){
    m_server.GET("/user/info",[](const HttpReq *req, HttpResp *resp){
        // 解析uri
        string uri = req->get_request_uri();
        auto params = parse_uri(uri);

        User user;
        user.username = params["username"];
        string token = params["token"];

        if (!CryptoUtil::verifyToken(token, user)) {
            resp->set_status(HttpStatusUnauthorized);
            json j;
            j["status"] = "invalid or expired token";
            resp->add_header_pair("Content-Type", "application/json; charset=utf-8");
            resp->String(j.dump(4));
            return;
        }

        
        // 4.校验token
        if(!CryptoUtil::verifyToken(token,user)){
            resp->set_status(HttpStatusUnauthorized);   // 401
            json j;
            j["status"] = "Unauthorized";
            resp->add_header_pair("Content-Type", "application/json; charset=utf-8");
            resp->String(j.dump(4)); 
            return;
        }
        // 5.查询用户注册时间
        string sql_created_at = "SELECT created_at FROM tbl_user WHERE username = '" + user.username + "';";

        resp->MySQL(mysql_url,sql_created_at,[resp,user](MySQLResultCursor* cursor){
            map<string,MySQLCell> record;
            if(!cursor->fetch_row(record)){
                resp->set_status(HttpStatusBadRequest);
                json j;
                j["status"] = "user not exists";
                resp->add_header_pair("Content-Type", "application/json; charset=utf-8");
                resp->String(j.dump(4)); 
                return;
            }

            // 用户已经注册
            //user.createAt = record["created_at"].as_string();

            string createAt = record["created_at"].as_string();

            // 6.构造返回JSON
            json j;
            j["data"]["Username"] = user.username;
            j["data"]["SignupAt"] = createAt;
            resp->add_header_pair("Content-Type", "application/json; charset=utf-8");
            resp->String(j.dump(4)); 
        });
    });
}

// 文件列表查询
void CloudiskServer::register_filelist_module(){
    m_server.POST("/file/query",[](const HttpReq *req, HttpResp *resp){
        // 解析uri
        string uri = req->get_request_uri();
        auto params = parse_uri(uri);

        User user;
        user.username = params["username"];
        string token = params["token"];

        if (!CryptoUtil::verifyToken(token, user)) {
            resp->set_status(HttpStatusUnauthorized);
            json j;
            j["status"] = "invalid or expired token";
            resp->add_header_pair("Content-Type", "application/json; charset=utf-8");
            resp->String(j.dump(4));
            return;
        }
        
        // 2.从表单获取list
        auto &list = req->form_kv();   // x-www-form-urlencoded
        int limit = 10;


        // 4.查询当前用户文件列表
        string sql_file_query = "SELECT f.hashcode, f.filename, f.size, f.created_at, f.last_update FROM tbl_file f "
        "LEFT JOIN tbl_user u on u.id = f.uid "
        "WHERE u.username = '" + user.username + "' AND f.status = 0 "
        "ORDER BY f.created_at DESC "
        "LIMIT " + std::to_string(limit) + ";";

        resp->MySQL(mysql_url,sql_file_query,[resp](MySQLResultCursor* cursor){
            vector<json> fileInfo;
            map<string,MySQLCell> record;
            
            while(cursor->fetch_row(record)){
                json f;
                f["FileHash"] = record["hashcode"].as_string();
                f["FileName"] = record["filename"].as_string();
                f["FileSize"]    = record["size"].as_ulonglong();
                f["UploadAt"] = record["created_at"].as_string();
                f["LastUpdated"] = record["last_update"].as_string();
                fileInfo.push_back(f);
            }


            if(fileInfo.empty()){
                resp->set_status(HttpStatusOK);
                json j;
                j["status"] = "file not exists";
                resp->String(j.dump(4));
                return;
            }

            // 构造返回JSON
            resp->set_status(HttpStatusOK);
            resp->String(json(fileInfo).dump(4));
        });
    });
}

// 文件上传
void CloudiskServer::register_fileupload_module() {
    m_server.POST("file/upload", [](const HttpReq * req, HttpResp * resp) {

        // 1.解析uri
        string uri = req -> get_request_uri();
        auto params = parse_uri(uri);
        User user;
        user.username = params["username"];
        string token = params["token"];

        // 2.根据用户名查询uid
        string sql_signin = "SELECT id FROM tbl_user WHERE username = '" + user.username + "' LIMIT 1;";

        resp -> MySQL(mysql_url, sql_signin, [resp, req, user](MySQLResultCursor * cursor) { //适合 INSERT/UPDATE/DELETE 或者需要手动遍历结果的场景
            // 查询没有结果
            map < string, MySQLCell > record;
            if (!cursor -> fetch_row(record)) {
                resp -> set_status(HttpStatusBadRequest);
                json j;
                j["status"] = "select failed, username not exists";
                resp -> add_header_pair("Content-Type", "application/json");
                resp -> String(j.dump(4));
                return;
            }
            // 查询成功
            int uid = record["id"].as_int();


            // 3.读取文件上传内容(以 form-data 的方式上传文件
            if (req -> content_type() != MULTIPART_FORM_DATA) {
                resp -> set_status(HttpStatusBadRequest); // 响应状态码: 400 BadRequest
                return;
            }
            // 4.解析表单，
            const Form & form = req -> form();

            for (const auto & [_, fileInfo]: form) {
                const auto & [filename, content] = fileInfo;

                // 写入磁盘,wfrest自带
                //resp -> Save(PathUtil::base(filename), std::move(content));

                // 计算文件哈希（基于磁盘路径）
                string content_hash = CryptoUtil::hashFile(content, EVP_sha256());

                // 6.写入数据库

                // 先查tbl_file是否已有content_hash记录
                // 如果有，则不用存到文件目录下，只需要往表中插入记录即可
                // 如果没有，则需要将文件保存到文件目录下，并且将记录写入文件表

                // 5.先查该用户是否已有同名文件
                string sql_check_filename = "SELECT id, filename FROM tbl_file WHERE uid=" + std::to_string(uid) +
                    " AND filename='" + filename + "' LIMIT 1";


                // string sql_check = "SELECT id FROM tbl_file WHERE hashcode ='" + content_hash +"' LIMIT 1";

                resp -> MySQL(mysql_url, sql_check_filename, [resp, uid, filename, content_hash, size = content.size(), content](MySQLResultCursor * filename_cursor) {
                    map < string, MySQLCell > filename_record;
                    if (filename_cursor -> fetch_row(filename_record)) {
                        // 已有同名文件,但是内容不一样 → 更新记录
                        string sql_update_hashcode = "UPDATE tbl_file SET hashcode='" + content_hash +
                            "', size='" + std::to_string(size) + "' WHERE filename= '" + filename_record["filename"].as_string() +"';";
                        // 同名新文件保存到本地
                        string save_path = "./static/view/upload_files/" + PathUtil::base(content_hash);
                        ofstream ofs(save_path, std::ios::binary);
                        if (!ofs) {
                            resp -> set_status(HttpStatusInternalServerError);
                            json j;
                            j["status"] = "failed to save file";
                            resp -> add_header_pair("Content-Type", "application/json");
                            resp -> String(j.dump(4));
                            return;
                        }
                        ofs.write(content.data(), content.size());
                        ofs.close();

                        // 增加MQ消息队列
                                MqClientWrapper mq("127.0.0.1", 5672, "guest", "guest", "/");
                                        mq.declare("cloudisk.exchange", "file.upload.queue", "file.upload");
                                        json msg;
                                        msg["operation"] = "upload";
                                        msg["filename"] = filename;
                                        msg["hashcode"] = content_hash;
                                        mq.publish("cloudisk.exchange", "file.upload", msg.dump());// 发送消息
                        // 上传到OSS
                        /* OssClientWrapper oss{"",
                                            "",
                                            ""
                                            };

                        oss.putObject("peano-taylor", "dir/" + filename , "./static/view/upload_files/" + content_hash); */ 


                        resp -> MySQL(mysql_url, sql_update_hashcode, [resp, uid, filename, content_hash, size = content.size(), content](MySQLResultCursor * update_hashcode_cursor) {
                            json j;
                            j["filename"] = filename;
                            if (update_hashcode_cursor->get_cursor_status() == MYSQL_STATUS_OK) {
                                resp->set_status(HttpStatusSeeOther); // 303
                                resp->add_header_pair("Location", "./static/view/home.html");
                            } else {
                                resp->set_status(HttpStatusInternalServerError);
                                j["status"] = "update failed";
                                resp->add_header_pair("Content-Type", "application/json; charset=utf-8");
                                resp->String(j.dump(4));
                            }
                        });
                    } else { // 没有同名文件
                        // 检查文件目录下是否已存在该文件(遍历tbl_file的hashcode)
                        string sql_check_hashcode = "SELECT id FROM tbl_file WHERE hashcode = '" + content_hash + "';";
                        resp -> MySQL(mysql_url, sql_check_hashcode, [resp, uid, filename, content_hash, size = content.size(), content](MySQLResultCursor * check_hashcode_cursor) {
                            map < string, MySQLCell > check_hashcode_record;
                            if (check_hashcode_cursor -> fetch_row(check_hashcode_record)) {
                                // tbl_file中已存在hashcode → 表中插入记录
                                string sql_insert_file_info = "INSERT INTO tbl_file(uid, filename, hashcode, size) VALUES('" +
                                    std::to_string(uid) + "','" + filename + "','" + content_hash + "','" + std::to_string(size) + "')";

                                resp -> MySQL(mysql_url, sql_insert_file_info, [resp, filename,content_hash](MySQLResultCursor * update_cursor) {
                                    json j;
                                    j["filename"] = filename;
                                    if (update_cursor -> get_cursor_status() == MYSQL_STATUS_OK) {

                                        // 增加:发送MQ消息
                                        MqClientWrapper mq("127.0.0.1", 5672, "guest", "guest", "/");
                                        mq.declare("cloudisk.exchange", "file.upload.queue", "file.upload");
                                        json msg;
                                        msg["operation"] = "upload";
                                        msg["filename"] = filename;
                                        msg["hashcode"] = content_hash;
                                        mq.publish("cloudisk.exchange", "file.upload", msg.dump());// 发送消息

                                        resp -> set_status(HttpStatusSeeOther); // 303
                                        resp -> add_header_pair("Location", "./static/view/home.html");
                                    } else {
                                        resp -> set_status(HttpStatusInternalServerError);
                                        j["status"] = "update failed";
                                    }
                                    resp -> add_header_pair("Content-Type", "application/json");
                                    resp -> String(j.dump(4));
                                });

                            } else {
                                string sql_insert_file_info = "INSERT INTO tbl_file(uid, filename, hashcode, size) VALUES('" +
                                    std::to_string(uid) + "','" + filename + "','" + content_hash + "','" + std::to_string(size) + "')";

                                // 文件目录中不存在则写入
                                string save_path = "./static/view/upload_files/" + PathUtil::base(content_hash);
                                ofstream ofs(save_path, std::ios::binary);
                                if (!ofs) {
                                    resp -> set_status(HttpStatusInternalServerError);
                                    json j;
                                    j["status"] = "failed to save file";
                                    resp -> add_header_pair("Content-Type", "application/json");
                                    resp -> String(j.dump(4));
                                    return;
                                }
                                ofs.write(content.data(), content.size());
                                ofs.close();
                                
                                // 增加MQ消息队列
                                MqClientWrapper mq("127.0.0.1", 5672, "guest", "guest", "/");
                                        mq.declare("cloudisk.exchange", "file.upload.queue", "file.upload");
                                        json msg;
                                        msg["operation"] = "upload";
                                        msg["filename"] = filename;
                                        msg["hashcode"] = content_hash;
                                        mq.publish("cloudisk.exchange", "file.upload", msg.dump());// 发送消息
                                // 上传到OSS
                                /* OssClientWrapper oss{"",
                                                    "",
                                                    ""
                                                    };

                                oss.putObject("peano-taylor", "dir/" + filename , "./static/view/upload_files/" + content_hash); */ 


                                resp -> MySQL(mysql_url, sql_insert_file_info, [resp, filename](MySQLResultCursor * update_cursor) {
                                    json j;
                                    j["filename"] = filename;
                                    if (update_cursor -> get_cursor_status() == MYSQL_STATUS_OK) {
                                        //resp->set_status(HttpStatusOK);
                                        //j["status"] = "update success";
                                        resp -> set_status(HttpStatusSeeOther); // 303
                                        resp -> add_header_pair("Location", "./static/view/home.html");
                                    } else {
                                        resp -> set_status(HttpStatusInternalServerError);
                                        j["status"] = "update failed";
                                    }
                                    resp -> add_header_pair("Content-Type", "application/json");
                                    resp -> String(j.dump(4));
                                });
                            }
                        });
                    }

                });

            }
        });
    });

    

    m_server.Static("/file/static/view", "./static/view");
}

// 文件下载
void CloudiskServer::register_filedownload_module(){
    m_server.GET("file/download",[](const HttpReq* req,HttpResp *resp){

        auto params = req->query_list();
        string filename = params["filename"];
        string hashcode = params["filehash"];
        string username = params["username"];
        string token = params["token"];

        
        User user;

        if (!CryptoUtil::verifyToken(token, user)) {
            resp->set_status(HttpStatusUnauthorized);
            json j;
            j["status"] = "invalid or expired token";
            resp->add_header_pair("Content-Type", "application/json; charset=utf-8");
            resp->String(j.dump(4));
            return;
        }
        cout << username << ":" << token << endl;
        // 根据username —> uid 关联 tbl_file的uid -> hashcode(路径下的文件)
        string sql_find_file ="SELECT f.filename, f.hashcode, f.size, f.last_update FROM tbl_file f "
            "LEFT JOIN tbl_user u ON u.id = f.uid "
            "WHERE u.username = '" + urlDecode(username) + "' "
            "AND f.hashcode = '" + hashcode + "' LIMIT 1;";
        resp->MySQL(mysql_url,sql_find_file,[resp,filename,hashcode](MySQLResultCursor* cursor){
            map <string,MySQLCell> file_record;
            if (!cursor->fetch_row(file_record)) {
                resp->set_status(HttpStatusNotFound);
                json j;
                j["status"] = "file not found";
                resp->add_header_pair("Content-Type", "application/json; charset=utf-8");
                resp->String(j.dump(4));
                return;
            }

            
            string path = "./static/view/upload_files/" + hashcode;
            // 找到文件
            if (access(path.c_str(), R_OK) == -1) {
                resp->set_status(HttpStatusNotFound);
                json j;
                j["status"] = "file missing on server";
                resp->add_header_pair("Content-Type", "application/json; charset=utf-8");
                resp->String(j.dump(4));
                return;
            }

            // 设置下载响应头
            resp->set_status(HttpStatusOK);
            resp->add_header_pair("Content-Disposition", "attachment; filename=\"" + filename + "\"");
            resp->File(path);

        });
    });
}

// 文件删除
void CloudiskServer::register_filedelete_module() {
    m_server.POST("/file/delete", [](const HttpReq * req, HttpResp * resp) {
        std::cout << "进入 /file/delete handler" << std::endl;
        string hashcode = req -> form_kv()["filehash"];
        string filename = urlDecode(req -> form_kv()["filename"]);
        string username = urlDecode(req -> query("username"));

        if (hashcode.empty() || filename.empty() || username.empty()) {
            json j;
            j["status"] = "FAIL";
            j["msg"] = "参数缺失";
            resp -> String(j.dump(4));
            return;
        }

        resp->add_header_pair("Content-Type", "application/json; charset=utf-8");
        // Step1: 查 uid
        string sql_uid = "SELECT id FROM tbl_user WHERE username='" + username + "';";
        resp -> MySQL(mysql_url, sql_uid,
            [resp, hashcode, filename, username](MySQLResultCursor * uid_cursor) {
                map < string, MySQLCell > record;
                if (!uid_cursor -> fetch_row(record)) {
                    json j;
                    j["status"] = "FAIL";
                    j["msg"] = "用户不存在";
                    resp -> String(j.dump(4));
                    return;
                }

                int uid = record["id"].as_int();

                // Step2: 删除用户文件记录
                string sql_delete = "DELETE FROM tbl_file WHERE  hashcode='" + hashcode +
                    "' AND filename='" + filename + "' AND uid= '" + std::to_string(uid) + "' LIMIT 1;";
                    cout << sql_delete << endl;
                resp -> MySQL(mysql_url, sql_delete,
                    [resp, uid, hashcode](MySQLResultCursor * del_cursor) {

                        // Step3: 检查是否还剩同 hash 文件
                        string sql_check = "SELECT count(*) as cnt FROM tbl_file WHERE uid='" + std::to_string(uid) + "';";
                        resp -> MySQL(mysql_url, sql_check,
                            [resp, hashcode](MySQLResultCursor * check_cursor) {
                                map < string, MySQLCell > rec;
                                if (!check_cursor -> fetch_row(rec)) {
                                    json j;
                                    j["status"] = "FAIL";
                                    j["msg"] = "检查文件引用失败";
                                    resp -> String(j.dump(4));
                                    return;
                                }

                                int cnt = rec["cnt"].as_ulonglong();
                                if (cnt == 0) {
                                    // 物理文件没人用了 → 删除
                                    string filepath = "./static/view/upload_files/" + hashcode;
                                    fs::remove(filepath);
                                    json j;
                                    j["status"] = "SUCCESS";
                                    j["msg"] = "删除成功";
                                    resp -> String(j.dump(4));
                                } else {
                                    json j;
                                    j["status"] = "SUCCESS";
                                    j["msg"] = "删除成功";
                                    resp -> String(j.dump(4));
                                }
                            });
                    });
            });
    });
}
    


===== CloudiskServer.h =====
#pragma once

// 设计原则：组合 > 继承
//      有选择地复用代码 > 复用基类的所有代码
//      组合：最好保持接口一致！降低用户的学习成本
#include <wfrest/HttpServer.h>
#include <workflow/WFFacilities.h>
#include "OssClientWrapper.hpp" 

// 装饰器模式 (套壳)
// CloudiskServer 的用法和 HttpServer 的用法非常类似
// 接口一致，可以降低用户的学习成本
class CloudiskServer
{
public:
    CloudiskServer() {}

    // 注册路由
    void register_modules();

    int start(unsigned short port) {
        return m_server.start(port);
    }
    
    void stop() { m_server.stop(); }

    void list_routes() { m_server.list_routes(); }

    CloudiskServer& track()
    {
        m_server.track();
        return *this;
    }
private:
    // 注册路由
    void register_static_resources_module();
    void register_signup_module();
    void register_signin_module();
    void register_userinfo_module();
    void register_fileupload_module();
    void register_filelist_module();
    void register_filedownload_module();
    void register_filedelete_module();
private:
    // 名字中最好不要带具体的实现细节
    // 方便以后修改具体的实现
    wfrest::HttpServer m_server;    // 组合: 有选择的暴露接口
};



===== CMakeLists.txt =====
cmake_minimum_required(VERSION 3.15)
project(CloudDisk)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# 输出路径
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/..)

# ========== server (RPC服务端) ==========
add_executable(rpc_server
    server.cpp
    clouddisk.pb.cpp
    CryptoUtil.cpp
    OssClientWrapper.cpp
    MqClientWrapper.cpp
)
target_link_libraries(rpc_server PRIVATE
    workflow
    wfrest
    srpc
    protobuf
    crypto
    ssl
    jwt
    pthread
    curl
    alibabacloud-oss-cpp-sdk
    curl
    SimpleAmqpClient
    rabbitmq
)


# ========== cloudisk_server (HTTP网关) ==========
add_executable(cloudisk_server
    CloudiskServer.cpp
    clouddisk.pb.cpp
    CryptoUtil.cpp
    OssClientWrapper.cpp
    MqClientWrapper.cpp
    main.cpp
)
target_link_libraries(cloudisk_server PRIVATE
    workflow
    wfrest
    srpc
    protobuf
    crypto
    ssl
    jwt
    pthread
    curl
    alibabacloud-oss-cpp-sdk
    curl
    SimpleAmqpClient
    rabbitmq
)


===== CryptoUtil.cpp =====
#include "CryptoUtil.hpp"
#include <iostream>
#include <stdlib.h>
#include <string.h>
#include <openssl/evp.h>
#include <openssl/sha.h>
#include <sstream>
#include <fstream>
#include <iomanip>
using namespace std;
static const char *SECRET_KEY = "my_secret_key";
string CryptoUtil::generateSalt(size_t length)
{
    static const char charset[] = "0123456789"
                                  "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
                                  "abcdefghijklmnopqrstuvwxyz"
                                  "!@#$%^&*()-_=+[]{}|;:,.<>?";

    random_device rd;                                        // 随机种子数
    mt19937 gen(rd());                                       // 随机数生成
    uniform_int_distribution<> dist(0, sizeof(charset) - 2); // 均匀整数分布器模板

    string random_salt;
    random_salt.reserve();

    for (int i = 0; i < length; ++i)
    {
        random_salt.push_back(charset[dist(gen)]);
    }

    return random_salt;
}

string CryptoUtil::hashPassword(const string &password, const string &salt, const EVP_MD *md)
{
    EVP_MD_CTX *ctx = EVP_MD_CTX_new();  // 创建 EVP 上下文
    unsigned char hash[EVP_MAX_MD_SIZE]; // EVP_MAX_MD_SIZE: 最大哈希长度
    unsigned int hash_len;               // 用来接收实际的哈希长度

    EVP_DigestInit_ex(ctx, EVP_sha256(), NULL); // 初始化上下文，采用 sha256 哈希算法
    string data = password + salt;
    EVP_DigestUpdate(ctx, data.c_str(), data.size()); // 更新上下文
    EVP_DigestFinal_ex(ctx, hash, &hash_len);         // 计算哈希值

    // 转换为十六进制字符串
    char result[2 * EVP_MAX_MD_SIZE + 1] = {'\0'};
    for (int i = 0; i < hash_len; i++)
    { // 转换成十六进制字符
        sprintf(result + 2 * i, "%02x", hash[i]);
    }
    EVP_MD_CTX_free(ctx); // 释放上下文
    return result;
}

string CryptoUtil::hashFile(const string &fileData, const EVP_MD *md)
{
    EVP_MD_CTX *ctx = EVP_MD_CTX_new();  // 创建 EVP 上下文
    unsigned char hash[EVP_MAX_MD_SIZE]; // EVP_MAX_MD_SIZE: 最大哈希长度
    unsigned int hash_len;               // 用来接收实际的哈希长度

    EVP_DigestInit_ex(ctx, EVP_sha256(), NULL); // 初始化上下文，采用 sha256 哈希算法
    string data = fileData;
    EVP_DigestUpdate(ctx, data.c_str(), data.size()); // 更新上下文
    EVP_DigestFinal_ex(ctx, hash, &hash_len);         // 计算哈希值

    // 转换为十六进制字符串
    char result[2 * EVP_MAX_MD_SIZE + 1] = {'\0'};
    for (int i = 0; i < hash_len; i++)
    { // 转换成十六进制字符
        sprintf(result + 2 * i, "%02x", hash[i]);
    }
    EVP_MD_CTX_free(ctx); // 释放上下文
    return result;
}


string CryptoUtil::generateToken(const User &user, jwt_alg_t algorithm)
{
    jwt_t *jwt; // 创建jwt对象
    jwt_new(&jwt);

    jwt_set_alg(jwt, JWT_ALG_HS256, (unsigned char *)SECRET_KEY, strlen(SECRET_KEY));

    // 设置载荷(Payload): 用户自定义数据(不能存放敏感数据，比如：password, salt)
    jwt_add_grant(jwt, "sub", "login"); // 表示这个 Token 的用途是登录
    jwt_add_grant_int(jwt, "id", user.id);
    jwt_add_grant(jwt, "username", user.username.c_str());
    jwt_add_grant_int(jwt, "exp", time(NULL) + 1800); // 自定义过期时间字段

    char *token = jwt_encode_str(jwt);
    string result = token;

    jwt_free(jwt);
    free(token);

    return result;
}

bool CryptoUtil::verifyToken(const string &token, User &user)
{
    jwt_t *jwt;
    int err = jwt_decode(&jwt, token.c_str(), (unsigned char *)SECRET_KEY, strlen(SECRET_KEY));
    if (err)
    {

        return "failed";
    }
    jwt_free(jwt);
    return true;
}


===== CryptoUtil.hpp =====
#pragma once
#include "User.hpp"
#include <string>
#include <iostream>
#include <random>
#include <openssl/evp.h>
#include "jwt.h"
using std::string;
using std::cout;
using std::endl;
class CryptoUtil
{
public:
    static string generateSalt(size_t length = 16);
    static string hashPassword(const string &password, const string &salt, const EVP_MD *md);
    static string hashFile(const string &fileData, const EVP_MD *md);
    static string generateToken(const User &user, jwt_alg_t algorithm = JWT_ALG_HS256);
    static bool verifyToken(const string &token, User &user);

private:
    CryptoUtil() = delete;
};


===== main.cpp =====
#include <iostream>
#include <signal.h>
#include "CloudiskServer.h"

WFFacilities::WaitGroup g_waitGroup { 1 };

void sig_handler(int)
{
    g_waitGroup.done();
}

int main()
{

    signal(SIGINT, sig_handler);

    CloudiskServer svr;

    // 注册路由
    svr.register_modules();

    if (svr.track().start(8888) == 0) {
        svr.list_routes();
        g_waitGroup.wait();
        svr.stop();
    } else {
        std::cerr << "Error: server start failed!\n";
    }
}


===== MqClientWrapper.cpp =====
#include "MqClientWrapper.hpp"
using namespace AmqpClient;

MqClientWrapper::MqClientWrapper(const string &host, int port, const string &username, const string &password, const string &vhost)
{
    m_channel = Channel::Create("127.0.0.1", 5672, "guest", "guest", "/");
}

MqClientWrapper::~MqClientWrapper() {
    // 如果后续需要释放资源可以写在这里，目前空实现即可
}

// 声明交换机和队列
void MqClientWrapper::declare(const string &exchange, const string &queue, const string &routing_key, const string &type)
{
    m_channel->DeclareExchange(exchange, type, true);          // durable exchange
    m_channel->DeclareQueue(queue, true, false, false, false); // durable queue
    m_channel->BindQueue(queue, exchange, routing_key);
}

// 发送消息
void MqClientWrapper::publish(const string &exchange, const string &routing_key, const string &body)
{
    auto msg = BasicMessage::Create(body);
    msg->DeliveryMode(BasicMessage::dm_persistent); // durable
    m_channel->BasicPublish(exchange, routing_key, msg);
}

// 消费消息（阻塞模式）
bool MqClientWrapper::consume(const string &queue, Envelope::ptr_t &env, int timeout_ms)
{
    static string consumer_tag;
    if (consumer_tag.empty())
    {
        consumer_tag = m_channel->BasicConsume(queue, "", true, false, false);
    }
    return m_channel->BasicConsumeMessage(consumer_tag, env, timeout_ms);
}

// 确认消息
void MqClientWrapper::ack(const Envelope::ptr_t &env)
{
    m_channel->BasicAck(env);
}


===== MqClientWrapper.hpp =====
#pragma once
#include <SimpleAmqpClient/SimpleAmqpClient.h>
#include <string>
#include <memory>

using std::string;
using AmqpClient::Channel;
using AmqpClient::BasicMessage;
using AmqpClient::Envelope;


class MqClientWrapper
{
public:
    MqClientWrapper(const string &host,int port,const string &username,const string &password,const string &vhost);

    ~MqClientWrapper();

    // 声明交换机和队列
    void declare(const string& exchange,const string& queue,const string& routing_key,const string& type = Channel::EXCHANGE_TYPE_DIRECT);

    // 发送消息
    void publish(const string& exchange,const string& routing_key,const string& body);

    // 消费消息（阻塞模式）
    bool consume(const string& queue, Envelope::ptr_t& env, int timeout_ms = 1000);

    // 确认消息
    void ack(const Envelope::ptr_t& env);

private:
    Channel::ptr_t m_channel;
};



===== MqConsumer.cpp =====
#include <iostream>
#include "MqClientWrapper.hpp"
#include "OssClientWrapper.hpp"
#include <nlohmann/json.hpp>
#include <fstream>
#include <thread>
#include <chrono>

using namespace std;
using json = nlohmann::json;

int main()
{
    // 使用默认 vhost "/"
    MqClientWrapper mq("127.0.0.1", 5672, "guest", "guest", "/");

    mq.declare("cloudisk.exchange", "file.upload.queue", "file.upload");
    Envelope::ptr_t env;

    cout << " [*] MQ Consumer 已启动，等待消息..." << endl;

    while (true)   // 永不退出
    {
        if (mq.consume("file.upload.queue", env))   // 收到消息
        {
            try {
                string body = env->Message()->Body();
                json msg = json::parse(body);

                if (msg["operation"] == "upload")
                {
                    string filename = msg["filename"];
                    string hashcode = msg["hashcode"];
                    string local_path = "./static/view/upload_files/" + hashcode;

                    OssClientWrapper oss{"",
                                         "",
                                         ""};

                    oss.putObject("peano-taylor", "dir/" + filename, local_path);
                    cout << " [x] 异步上传完成: " << filename << endl;
                }

                // 消费成功要 ack，否则消息可能会被重复投递
                mq.ack(env);
            }
            catch (const std::exception& e) {
                cerr << " [!] 处理消息时发生错误: " << e.what() << endl;
            }
        }
        else
        {
            // 没有消息 → 休眠 1 秒后继续循环
            std::this_thread::sleep_for(std::chrono::seconds(1));
        }
    }

    return 0; // 实际上不会走到这里
}


===== OssClientWrapper.cpp =====
#include "OssClientWrapper.hpp"
#include <iostream>
using namespace AlibabaCloud::OSS;
using namespace std;

OssClientWrapper::OssClientWrapper(const string &endpoint, const string &accessKeyId, const string &accessKeySecret)
        :_conf(), 
         _client(endpoint, accessKeyId, accessKeySecret, _conf){}

OssClientWrapper::~OssClientWrapper(){
    // 释放 OSS SDK 资源
    ShutdownSdk();
}

void OssClientWrapper::putObject(const string& bucketName,const string& objectName,const string& localFile){
    
    auto outcome = _client.PutObject(bucketName, objectName, localFile);
    if (!outcome.isSuccess()) {
        /* 异常处理。*/
        std::cout << "PutObject fail" <<
        ",code:" << outcome.error().Code() <<
        ",message:" << outcome.error().Message() <<
        ",requestId:" << outcome.error().RequestId() << std::endl;
    }
}



===== OssClientWrapper.hpp =====
#pragma once
#include <string>
#include <alibabacloud/oss/OssClient.h>
using std::string;
class OssClientWrapper
{
public:
    OssClientWrapper(const string &endpoint, const string &accessKeyId, const string &accessKeySecret);
    ~OssClientWrapper();

    // 上传文件（失败抛异常）
    void putObject(const string &bucketName, const string &objectName, const string &localFile);

private:
    AlibabaCloud::OSS::ClientConfiguration _conf;
    AlibabaCloud::OSS::OssClient _client;
};


===== server.cpp =====
#include "clouddisk.srpc.h"
#include "workflow/WFFacilities.h"
#include "workflow/WFTaskFactory.h"
#include "workflow/MySQLResult.h"
#include "CryptoUtil.hpp"
#include <iostream>
#include <map>
#include <signal.h>

using namespace srpc;
using namespace std;
using namespace protocol;
static const string mysql_url = "mysql://root:ZYJ.01234@127.0.0.1/http";

static WFFacilities::WaitGroup wait_group(1);

void sig_handler(int signo)
{
	wait_group.done();
}

class UserServiceServiceImpl : public ::clouddisk::UserService::Service
{
public:

	void SignUp(::clouddisk::SignUpRequest *req, ::clouddisk::SignUpResponse *resp, srpc::RPCContext *ctx) override
	{
		// TODO: fill server logic here
		// 1. 校验请求参数，解析请求参数

        string username = req->username();
        string password = req->password();

        if (username.empty() || password.empty())
        {
            resp->set_status("FAIL");
            resp->set_msg("missing username or password");
            return;
        }

        // 2.生成盐值
        string salt = CryptoUtil::generateSalt();
        string hash = password + salt;

        string store_password = CryptoUtil::hashPassword(password, salt, EVP_sha256());

        string sql_signup = "INSERT INTO tbl_user(username, password, salt) VALUES ('" + username + "', '" + store_password + "', '" + salt + "')";

        WFMySQLTask *mysqlTask = WFTaskFactory::create_mysql_task(mysql_url,1,[resp](WFMySQLTask *task){
			int state = task->get_state();
			if(state != WFT_STATE_SUCCESS){
				resp->set_status("FAIL");
                resp->set_msg("mysql task error");
                return;
			}
			 // 用 MySQLResultCursor 包装 resp
			MySQLResultCursor cursor(task->get_resp());

            if (cursor.get_cursor_status() == MYSQL_STATUS_ERROR)
            {
                resp->set_status("FAIL");
                resp->set_msg("insert failed (maybe username exists)");
                return;
            }

            resp->set_status("SUCCESS");
            resp->set_msg("signup ok");
		});
		mysqlTask->get_req()->set_query(sql_signup);
		ctx->get_series()->push_back(mysqlTask);
	}

	void SignIn(::clouddisk::SignUpRequest *req, ::clouddisk::SignUpResponse *resp, srpc::RPCContext *ctx) override
	{
		// TODO: fill server logic here
		string username = req->username();
		string password = req->password();

		string sql_signin = "SELECT id,password,salt FROM tbl_user WHERE username = '" + username + "' LIMIT 1;";

		WFMySQLTask *mysqlTask = WFTaskFactory::create_mysql_task(mysql_url,1,[resp,username,password](WFMySQLTask *task){
			int state = task->get_state();
			if(state != WFT_STATE_SUCCESS){
				resp->set_status("FAIL");
				resp->set_msg("mysql task error");
				return;
			}
			// 用 MySQLResultCursor 包装 resp
			MySQLResultCursor cursor(task->get_resp());
			if (cursor.get_cursor_status() == MYSQL_STATUS_ERROR)
            {
                resp->set_status("FAIL");
                resp->set_msg("insert failed (maybe username exists)");
                return;
            }

			std::map<string,MySQLCell> record;
			if(!cursor.fetch_row(record)){
				resp->set_status("FAIL");
				resp->set_msg("user not found");
				return;
			}

			string password_hash = record["password"].as_string();
			string salt = record["salt"].as_string();

			string cal_hash = CryptoUtil::hashPassword(password,salt,EVP_sha256());
			if(cal_hash != password_hash){
				resp->set_status("FAIL");
				resp->set_msg("password incorrect");
				return;
			}

			User user;
            user.id = record["id"].as_int();
            user.username = username;
            user.password = password_hash;
            user.salt = salt;

            string token = CryptoUtil::generateToken(user, JWT_ALG_HS256);

            resp->set_status("SUCCESS");
            resp->set_msg("signin ok");
            resp->set_token(token); 

		});

		mysqlTask->get_req()->set_query(sql_signin);
		ctx->get_series()->push_back(mysqlTask);

		
	}
};

int main()
{
	signal(SIGINT,sig_handler);
	GOOGLE_PROTOBUF_VERIFY_VERSION;
	unsigned short port = 1412;
	SRPCServer server;

	UserServiceServiceImpl userservice_impl;
	server.add_service(&userservice_impl);

	server.start(port);
	wait_group.wait();
	server.stop();
	google::protobuf::ShutdownProtobufLibrary();
	return 0;
}


===== User.hpp =====
#pragma once
#include <string>
using std::string;

struct User{
    int id;
    string username;
    string password;
    string salt;
    string createAt;
};



