// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: clouddisk.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_clouddisk_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_clouddisk_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_clouddisk_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_clouddisk_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_clouddisk_2eproto;
namespace clouddisk {
class SignUpRequest;
struct SignUpRequestDefaultTypeInternal;
extern SignUpRequestDefaultTypeInternal _SignUpRequest_default_instance_;
class SignUpResponse;
struct SignUpResponseDefaultTypeInternal;
extern SignUpResponseDefaultTypeInternal _SignUpResponse_default_instance_;
}  // namespace clouddisk
PROTOBUF_NAMESPACE_OPEN
template<> ::clouddisk::SignUpRequest* Arena::CreateMaybeMessage<::clouddisk::SignUpRequest>(Arena*);
template<> ::clouddisk::SignUpResponse* Arena::CreateMaybeMessage<::clouddisk::SignUpResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace clouddisk {

// ===================================================================

class SignUpRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clouddisk.SignUpRequest) */ {
 public:
  inline SignUpRequest() : SignUpRequest(nullptr) {}
  ~SignUpRequest() override;
  explicit PROTOBUF_CONSTEXPR SignUpRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SignUpRequest(const SignUpRequest& from);
  SignUpRequest(SignUpRequest&& from) noexcept
    : SignUpRequest() {
    *this = ::std::move(from);
  }

  inline SignUpRequest& operator=(const SignUpRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SignUpRequest& operator=(SignUpRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SignUpRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SignUpRequest* internal_default_instance() {
    return reinterpret_cast<const SignUpRequest*>(
               &_SignUpRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SignUpRequest& a, SignUpRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SignUpRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SignUpRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SignUpRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SignUpRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SignUpRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SignUpRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SignUpRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clouddisk.SignUpRequest";
  }
  protected:
  explicit SignUpRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 1,
    kPasswordFieldNumber = 2,
  };
  // string username = 1;
  void clear_username();
  const std::string& username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // string password = 2;
  void clear_password();
  const std::string& password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // @@protoc_insertion_point(class_scope:clouddisk.SignUpRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_clouddisk_2eproto;
};
// -------------------------------------------------------------------

class SignUpResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clouddisk.SignUpResponse) */ {
 public:
  inline SignUpResponse() : SignUpResponse(nullptr) {}
  ~SignUpResponse() override;
  explicit PROTOBUF_CONSTEXPR SignUpResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SignUpResponse(const SignUpResponse& from);
  SignUpResponse(SignUpResponse&& from) noexcept
    : SignUpResponse() {
    *this = ::std::move(from);
  }

  inline SignUpResponse& operator=(const SignUpResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SignUpResponse& operator=(SignUpResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SignUpResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SignUpResponse* internal_default_instance() {
    return reinterpret_cast<const SignUpResponse*>(
               &_SignUpResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SignUpResponse& a, SignUpResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SignUpResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SignUpResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SignUpResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SignUpResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SignUpResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SignUpResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SignUpResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clouddisk.SignUpResponse";
  }
  protected:
  explicit SignUpResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kMsgFieldNumber = 2,
    kTokenFieldNumber = 3,
  };
  // string status = 1;
  void clear_status();
  const std::string& status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status();
  PROTOBUF_NODISCARD std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_NODISCARD std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // string token = 3;
  void clear_token();
  const std::string& token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token();
  PROTOBUF_NODISCARD std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // @@protoc_insertion_point(class_scope:clouddisk.SignUpResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_clouddisk_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SignUpRequest

// string username = 1;
inline void SignUpRequest::clear_username() {
  username_.ClearToEmpty();
}
inline const std::string& SignUpRequest::username() const {
  // @@protoc_insertion_point(field_get:clouddisk.SignUpRequest.username)
  return _internal_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SignUpRequest::set_username(ArgT0&& arg0, ArgT... args) {
 
 username_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clouddisk.SignUpRequest.username)
}
inline std::string* SignUpRequest::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:clouddisk.SignUpRequest.username)
  return _s;
}
inline const std::string& SignUpRequest::_internal_username() const {
  return username_.Get();
}
inline void SignUpRequest::_internal_set_username(const std::string& value) {
  
  username_.Set(value, GetArenaForAllocation());
}
inline std::string* SignUpRequest::_internal_mutable_username() {
  
  return username_.Mutable(GetArenaForAllocation());
}
inline std::string* SignUpRequest::release_username() {
  // @@protoc_insertion_point(field_release:clouddisk.SignUpRequest.username)
  return username_.Release();
}
inline void SignUpRequest::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(username, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (username_.IsDefault()) {
    username_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clouddisk.SignUpRequest.username)
}

// string password = 2;
inline void SignUpRequest::clear_password() {
  password_.ClearToEmpty();
}
inline const std::string& SignUpRequest::password() const {
  // @@protoc_insertion_point(field_get:clouddisk.SignUpRequest.password)
  return _internal_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SignUpRequest::set_password(ArgT0&& arg0, ArgT... args) {
 
 password_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clouddisk.SignUpRequest.password)
}
inline std::string* SignUpRequest::mutable_password() {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:clouddisk.SignUpRequest.password)
  return _s;
}
inline const std::string& SignUpRequest::_internal_password() const {
  return password_.Get();
}
inline void SignUpRequest::_internal_set_password(const std::string& value) {
  
  password_.Set(value, GetArenaForAllocation());
}
inline std::string* SignUpRequest::_internal_mutable_password() {
  
  return password_.Mutable(GetArenaForAllocation());
}
inline std::string* SignUpRequest::release_password() {
  // @@protoc_insertion_point(field_release:clouddisk.SignUpRequest.password)
  return password_.Release();
}
inline void SignUpRequest::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocated(password, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (password_.IsDefault()) {
    password_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clouddisk.SignUpRequest.password)
}

// -------------------------------------------------------------------

// SignUpResponse

// string status = 1;
inline void SignUpResponse::clear_status() {
  status_.ClearToEmpty();
}
inline const std::string& SignUpResponse::status() const {
  // @@protoc_insertion_point(field_get:clouddisk.SignUpResponse.status)
  return _internal_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SignUpResponse::set_status(ArgT0&& arg0, ArgT... args) {
 
 status_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clouddisk.SignUpResponse.status)
}
inline std::string* SignUpResponse::mutable_status() {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:clouddisk.SignUpResponse.status)
  return _s;
}
inline const std::string& SignUpResponse::_internal_status() const {
  return status_.Get();
}
inline void SignUpResponse::_internal_set_status(const std::string& value) {
  
  status_.Set(value, GetArenaForAllocation());
}
inline std::string* SignUpResponse::_internal_mutable_status() {
  
  return status_.Mutable(GetArenaForAllocation());
}
inline std::string* SignUpResponse::release_status() {
  // @@protoc_insertion_point(field_release:clouddisk.SignUpResponse.status)
  return status_.Release();
}
inline void SignUpResponse::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocated(status, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (status_.IsDefault()) {
    status_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clouddisk.SignUpResponse.status)
}

// string msg = 2;
inline void SignUpResponse::clear_msg() {
  msg_.ClearToEmpty();
}
inline const std::string& SignUpResponse::msg() const {
  // @@protoc_insertion_point(field_get:clouddisk.SignUpResponse.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SignUpResponse::set_msg(ArgT0&& arg0, ArgT... args) {
 
 msg_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clouddisk.SignUpResponse.msg)
}
inline std::string* SignUpResponse::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:clouddisk.SignUpResponse.msg)
  return _s;
}
inline const std::string& SignUpResponse::_internal_msg() const {
  return msg_.Get();
}
inline void SignUpResponse::_internal_set_msg(const std::string& value) {
  
  msg_.Set(value, GetArenaForAllocation());
}
inline std::string* SignUpResponse::_internal_mutable_msg() {
  
  return msg_.Mutable(GetArenaForAllocation());
}
inline std::string* SignUpResponse::release_msg() {
  // @@protoc_insertion_point(field_release:clouddisk.SignUpResponse.msg)
  return msg_.Release();
}
inline void SignUpResponse::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(msg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (msg_.IsDefault()) {
    msg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clouddisk.SignUpResponse.msg)
}

// string token = 3;
inline void SignUpResponse::clear_token() {
  token_.ClearToEmpty();
}
inline const std::string& SignUpResponse::token() const {
  // @@protoc_insertion_point(field_get:clouddisk.SignUpResponse.token)
  return _internal_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SignUpResponse::set_token(ArgT0&& arg0, ArgT... args) {
 
 token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:clouddisk.SignUpResponse.token)
}
inline std::string* SignUpResponse::mutable_token() {
  std::string* _s = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:clouddisk.SignUpResponse.token)
  return _s;
}
inline const std::string& SignUpResponse::_internal_token() const {
  return token_.Get();
}
inline void SignUpResponse::_internal_set_token(const std::string& value) {
  
  token_.Set(value, GetArenaForAllocation());
}
inline std::string* SignUpResponse::_internal_mutable_token() {
  
  return token_.Mutable(GetArenaForAllocation());
}
inline std::string* SignUpResponse::release_token() {
  // @@protoc_insertion_point(field_release:clouddisk.SignUpResponse.token)
  return token_.Release();
}
inline void SignUpResponse::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (token_.IsDefault()) {
    token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:clouddisk.SignUpResponse.token)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace clouddisk

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_clouddisk_2eproto
